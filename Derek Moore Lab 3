{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMfNwh9fozAyE6u2mhRryUc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DerekMooreJr2002/Data-Science/blob/main/Derek%20Moore%20Lab%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Uut_DvTNrWHY"
      },
      "outputs": [],
      "source": [
        "Stats Notebook Lab #3\n",
        "Loops\n",
        "[ ]\n",
        "for i in range(100): #for this command you will be able to imput a range of numbers.It will give you every number in between the two you imput.\n",
        "    print(i)\n",
        "[ ]\n",
        "for i in range(5,8):\n",
        "    print(i)\n",
        "5\n",
        "6\n",
        "7\n",
        "[ ]\n",
        "for i in range(3):\n",
        "    print( \"Test Number: \" , i )\n",
        "Test Number:  0\n",
        "Test Number:  1\n",
        "Test Number:  2\n",
        "Functions\n",
        "[ ]\n",
        "def square(x): # this is a basic calculation command, this command allows you to squaew any number any ammount of times\n",
        "\n",
        "    return x**2\n",
        "[ ]\n",
        "square(5)\n",
        "[ ]\n",
        "square(square(2))\n",
        "16\n",
        "[ ]\n",
        "square(square(square(2)))\n",
        "\n",
        "256\n",
        "[ ]\n",
        "square(123456)\n",
        "15241383936\n",
        "[ ]\n",
        "square(square(5))\n",
        "625\n",
        "[ ]\n",
        "def add_two(x): #another basic calculation command, you can select a character to denote the addittion of two to a number\n",
        "    return x+2\n",
        "[ ]\n",
        "add_two(5)\n",
        "7\n",
        "[ ]\n",
        "square(add_two(5))\n",
        "49\n",
        "Logical Branching\n",
        "[ ]\n",
        "choice = \"apple\"\n",
        "[ ]\n",
        "if choice == \"apple\": #In this cell what you have is a basic variable command in which you can insert a word in place of something.\n",
        "\n",
        "    print(\"You choose apples.\")\n",
        "\n",
        "else:\n",
        "    \n",
        "    print(\"You did not choose apples.\")\n",
        "You choose apples.\n",
        "[ ]\n",
        "choice = \"orange\"\n",
        "[ ]\n",
        "if choice == \"apple\":\n",
        "\n",
        "    print(\"You choose apples.\")\n",
        "\n",
        "else:\n",
        "    \n",
        "    print(\"You did not choose apples.\")\n",
        "You did not choose apples.\n",
        "[ ]\n",
        "choice = \"apple\"\n",
        "[ ]\n",
        "if choice == \"apple\":\n",
        "\n",
        "    print(\"You choose apples.\")\n",
        "    print(\"Thank you, shop again!\")\n",
        "    print(2**123)\n",
        "\n",
        "elif choice == \"orange\":\n",
        "\n",
        "    print(\"You choose oranges.\")\n",
        "    print(\"Thank you, shop again!\")\n",
        "\n",
        "else:\n",
        "    \n",
        "    print(\"You did not choose apples or oranges.\")\n",
        "    print(\"Thank you, shop again!\")\n",
        "You choose apples.\n",
        "Thank you, shop again!\n",
        "10633823966279326983230456482242756608\n",
        "User Input\n",
        "[ ]\n",
        "choice = input(\"Please enter your choice (i.e. apple): \")\n",
        "Please enter your choice (i.e. apple): oranges\n",
        "[ ]\n",
        "choice\n",
        "\n",
        "[ ]\n",
        "if choice == \"apple\": \n",
        "\n",
        "    print(\"You choose apples.\")\n",
        "\n",
        "elif choice == \"oranges\":\n",
        "\n",
        "    print(\"You choose oranges.\")\n",
        "\n",
        "else:\n",
        "    \n",
        "    print(\"You did not choose apples or oranges.\")\n",
        "You choose oranges.\n",
        "Coins\n",
        "[ ]\n",
        "np.random.random()\n",
        "[ ]\n",
        "np.random.random() > 0.5 #in this cell what you have is a command for random chance. You can flip a coin and with the input of 0.5 you will have a 50% chance it will land on either side.\n",
        "[ ]\n",
        "def flip_coin():\n",
        "    if np.random.random() > 0.5:\n",
        "        print(\"Heads\")\n",
        "    else:\n",
        "        print(\"Tails\")\n",
        "[ ]\n",
        "flip_coin()\n",
        "Graphics Output\n",
        "[ ]\n",
        "from IPython.core.display import display, HTML\n",
        "[ ]\n",
        "display(HTML('<h1>Hello, world!</h1>'))\n",
        "[ ]\n",
        "def coin():\n",
        "  return np.random.randint(2)\n",
        "[ ]\n",
        "coin()\n",
        "[ ]\n",
        "display(HTML('<img src=\"https://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg\">'))\n",
        "[ ]\n",
        "heads = 'https://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg'\n",
        "tails = 'https://random-ize.com/coin-flip/us-quarter/us-quarter-back.jpg'\n",
        "[ ]\n",
        "def show_img(img):\n",
        "  display(HTML('<img src=' + img + '>'))\n",
        "[ ]\n",
        "show_img(heads)\n",
        "[ ]\n",
        "show_img(tails)\n",
        "[ ]\n",
        "def flip_coin():\n",
        "\n",
        "    if coin():\n",
        "        show_img(heads)\n",
        "    else:\n",
        "        show_img(tails)\n",
        "[ ]\n",
        "flip_coin()\n",
        "[ ]\n",
        "for i in range(5):\n",
        "    flip_coin()\n",
        "Coin Flip\n",
        "[ ]\n",
        "[ ]\n",
        "\n",
        "Cards\n",
        "[ ]\n",
        "def shuffle(x):\n",
        "    for i in range(len(x)-1,0,-1):\n",
        "        j = np.random.randint(0,i+1)\n",
        "        x[i],x[j] = x[j],x[i]\n",
        "        # print(j,x)\n",
        "    return x\n",
        "[ ]\n",
        "a = np.arange(52)\n",
        "[ ]\n",
        "shuffle(a)\n",
        "[ ]\n",
        "np.random.permutation(52)\n",
        "Speed Test\n",
        "[ ]\n",
        "%%timeit\n",
        "shuffle(a)\n",
        "[ ]\n",
        "%%timeit\n",
        "np.random.permutation(52)\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "import numpy as np #as similar in lab 2, numpy or np gives a command to start an array of numbers\n",
        "[ ]\n",
        "np.random.permutation(52)\n",
        "array([51, 40, 39,  2, 19, 24, 12,  7, 14, 28,  8, 21, 18, 49, 47, 27,  1,\n",
        "       44, 10, 16, 42,  3, 43, 31, 46, 29, 38,  4, 23,  5, 50, 35, 41, 36,\n",
        "       11, 13, 34, 15, 32, 26, 45, 20, 48, 30,  9, 17, 33,  0, 22, 25,  6,\n",
        "       37])\n",
        "[ ]\n",
        "cards = np.random.permutation(52)\n",
        "[ ]\n",
        "cards\n",
        "array([32,  0, 51, 29, 27, 15, 39, 45, 42, 12, 30, 28, 44, 34, 33, 16, 49,\n",
        "       47,  6, 22, 40, 24, 10, 21, 11, 23, 41, 48,  5, 36, 13, 46, 31, 17,\n",
        "        7, 14,  1, 26,  2, 43, 25,  4, 35, 18,  8, 37, 50,  9,  3, 38, 20,\n",
        "       19])\n",
        "[ ]\n",
        "cards[0]\n",
        "32\n",
        "[ ]\n",
        "cards[1]\n",
        "0\n",
        "[ ]\n",
        "cards[2]\n",
        "51\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "\n",
        "\n",
        "[ ]\n",
        "np.arange(52).reshape(4,13)\n",
        "array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],\n",
        "       [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n",
        "       [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38],\n",
        "       [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]])\n",
        "[ ]\n",
        "np.arange(52).reshape(4,13)%13\n",
        "array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],\n",
        "       [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],\n",
        "       [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],\n",
        "       [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]])\n",
        "[ ]\n",
        "np.arange(52).reshape(4,13)//13\n",
        "array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
        "       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n",
        "       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n",
        "       [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]])\n",
        "[ ]\n",
        "suits = ['Clubs','Spades','Hearts','Diamonds']\n",
        "names = ['Ace','Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten','Jack','Queen','King']\n",
        "[ ]\n",
        "def card_name(card_number):\n",
        "    \n",
        "    suit = card_number//13\n",
        "    name = card_number%13\n",
        "\n",
        "    return names[name] + \" of \" + suits[suit]\n",
        "[ ]\n",
        "card_name(0)\n",
        "\n",
        "[ ]\n",
        "card_name(51)\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "cards = np.random.permutation(52)\n",
        "[ ]\n",
        "top_of_deck         = card_name(cards[0])\n",
        "second_card_in_deck = card_name(cards[1])\n",
        "last_card_in_deck   = card_name(cards[-1])\n",
        "[ ]\n",
        "top_of_deck, second_card_in_deck, last_card_in_deck\n",
        "('Three of Hearts', 'Nine of Diamonds', 'Ten of Hearts')\n",
        "[ ]\n",
        "for i in range(5):\n",
        "    print(card_name(cards[i]))\n",
        "Four of Spades\n",
        "Six of Diamonds\n",
        "Ace of Diamonds\n",
        "Eight of Clubs\n",
        "Three of Diamonds\n",
        "[ ]\n",
        "for i in range(15):\n",
        "    print(card_name(cards[i]))\n",
        "Seven of Hearts\n",
        "Ace of Clubs\n",
        "King of Diamonds\n",
        "Four of Hearts\n",
        "Two of Hearts\n",
        "Three of Spades\n",
        "Ace of Diamonds\n",
        "Seven of Diamonds\n",
        "Four of Diamonds\n",
        "King of Clubs\n",
        "Five of Hearts\n",
        "Three of Hearts\n",
        "Six of Diamonds\n",
        "Nine of Hearts\n",
        "Eight of Hearts\n",
        "[ ]\n",
        "\n",
        "https://www.improvemagic.com/all-playing-cards-names-with-pictures/\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "card_url_head = \"https://www.improvemagic.com/wp-content/uploads/2020/11/\"\n",
        "card_url_tail = \".png\"\n",
        "[ ]\n",
        "suit = ['k','p','s','l']\n",
        "card = ['a','2','3','4','5','6','7','8','9','10','j','q','k']\n",
        "[ ]\n",
        "i = np.random.randint(4)\n",
        "j = np.random.randint(13)\n",
        "[ ]\n",
        "i,j\n",
        "(0, 11)\n",
        "[ ]\n",
        "suit[i]\n",
        "\n",
        "[ ]\n",
        "card[j]\n",
        "\n",
        "[ ]\n",
        "from IPython.core.display import display, HTML\n",
        "[ ]\n",
        "def show_img(img):\n",
        "  display(HTML('<img src=' + img + '>'))\n",
        "[ ]\n",
        "img = card_url_head + suit[i] + card[j] + card_url_tail\n",
        "[ ]\n",
        "show_img(img)\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "\n",
        "[ ]\n",
        "def card_image(card_number):\n",
        "    \n",
        "    i = card_number//13\n",
        "    j = card_number%13\n",
        "\n",
        "    return suit[i]+card[j]\n",
        "[ ]\n",
        "card_image(3)\n",
        "\n",
        "[ ]\n",
        "img = card_url_head + card_image(3) + card_url_tail\n",
        "[ ]\n",
        "show_img(img)\n",
        "\n",
        "[ ]\n",
        "for i in range(52):\n",
        "    img = card_url_head + card_image(i) + card_url_tail\n",
        "    show_img(img)\n",
        "\n",
        "[ ]\n",
        "Colab paid products - Cancel contracts here\n"
      ]
    }
  ]
}